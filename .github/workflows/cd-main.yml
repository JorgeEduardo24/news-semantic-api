name: cd-main

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build-test-push-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write   # OIDC/WIF

    # Envs a nivel de job (recomendado)
    env:
      EMBEDDING_BACKEND: fastembed
      MODEL_NAME: sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2
      QDRANT_HOST: localhost
      QDRANT_PORT: '6333'

    services:
      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333

    steps:
      - uses: actions/checkout@v4

      # --- CI: tests ---------------------------------------------------------
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install deps (poetry)
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          # instala dependencias + dev (pytest, etc.)
          poetry install --with dev

      - name: Wait for Qdrant to be ready
        run: |
          for i in {1..60}; do
            if curl -fsS http://localhost:6333/collections >/dev/null; then
              echo "Qdrant is ready"
              exit 0
            fi
            echo "waiting qdrant ($i/60)"
            sleep 1
          done
          echo "Qdrant not ready"; docker logs ${{ job.services.qdrant.id }}; exit 1

      - name: Run tests
        run: pytest -q

      # --- Auth GCP + GAR + GKE ----------------------------------------------
      - name: Auth to GCP via WIF
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          install_components: 'gke-gcloud-auth-plugin'

      - name: Configure Artifact Registry Docker auth
        run: gcloud auth configure-docker ${{ secrets.GKE_REGION }}-docker.pkg.dev -q

      # --- Build & Push image -----------------------------------------------
      # AR_REPO es SOLO el id del repo (ej. "news-semantic-api"); construimos la ruta completa:
      - name: Build & push image (AR_REPO = id del repo)
        env:
          REGION:  ${{ secrets.GKE_REGION }}
          PROJECT: ${{ secrets.GCP_PROJECT }}
          REPO_ID: ${{ secrets.AR_REPO }}
        run: |
          set -euo pipefail
          test -f deploy/Dockerfile || { echo "No se encontró deploy/Dockerfile"; ls -la deploy; exit 1; }

          IMAGE="${REGION}-docker.pkg.dev/${PROJECT}/${REPO_ID}/news-semantic-api:${GITHUB_SHA}"
          echo "IMAGE=$IMAGE"

          # usa el Dockerfile correcto pero mantén el contexto en la raíz
          docker build -f deploy/Dockerfile -t "$IMAGE" .

          docker push "$IMAGE"

          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "IMAGE_REPO=${IMAGE%:*}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${GITHUB_SHA}"  >> $GITHUB_ENV

      # --- Deploy (Helm) -----------------------------------------------------
      - uses: azure/setup-kubectl@v4
        with:
          version: v1.29.6
      - uses: azure/setup-helm@v4

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          cluster_name: ${{ secrets.GKE_CLUSTER }}
          location: ${{ secrets.GKE_REGION }}

      - name: Helm upgrade (API + Qdrant subchart)
        env:
          USE_GKE_GCLOUD_AUTH_PLUGIN: "True"
        run: |
          helm repo add qdrant https://qdrant.github.io/qdrant-helm || true
          helm repo update
          helm dependency update deploy/helm/news-semantic-api
          helm upgrade --install news-demo deploy/helm/news-semantic-api \
            --set image.repository="${{ env.IMAGE_REPO }}" \
            --set image.tag="${{ env.IMAGE_TAG }}" \
            -f deploy/helm/news-semantic-api/values.gke.yaml
